// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2021 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package k8s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutCrdHandlerFunc turns a function with the right signature into a put crd handler
type PutCrdHandlerFunc func(PutCrdParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutCrdHandlerFunc) Handle(params PutCrdParams) middleware.Responder {
	return fn(params)
}

// PutCrdHandler interface for that can handle valid put crd params
type PutCrdHandler interface {
	Handle(PutCrdParams) middleware.Responder
}

// NewPutCrd creates a new http.Handler for the put crd operation
func NewPutCrd(ctx *middleware.Context, handler PutCrdHandler) *PutCrd {
	return &PutCrd{Context: ctx, Handler: handler}
}

/*PutCrd swagger:route PUT /crd k8s putCrd

Register CRD

Registers a CRD to the K8s apiserver.


*/
type PutCrd struct {
	Context *middleware.Context
	Handler PutCrdHandler
}

func (o *PutCrd) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutCrdParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
