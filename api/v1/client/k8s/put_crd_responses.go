// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2021 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package k8s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cilium/cilium/api/v1/models"
)

// PutCrdReader is a Reader for the PutCrd structure.
type PutCrdReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutCrdReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPutCrdCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewPutCrdFailure()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutCrdCreated creates a PutCrdCreated with default headers values
func NewPutCrdCreated() *PutCrdCreated {
	return &PutCrdCreated{}
}

/*PutCrdCreated handles this case with default header values.

Success
*/
type PutCrdCreated struct {
}

func (o *PutCrdCreated) Error() string {
	return fmt.Sprintf("[PUT /crd][%d] putCrdCreated ", 201)
}

func (o *PutCrdCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutCrdFailure creates a PutCrdFailure with default headers values
func NewPutCrdFailure() *PutCrdFailure {
	return &PutCrdFailure{}
}

/*PutCrdFailure handles this case with default header values.

Registration failure
*/
type PutCrdFailure struct {
	Payload models.Error
}

func (o *PutCrdFailure) Error() string {
	return fmt.Sprintf("[PUT /crd][%d] putCrdFailure  %+v", 500, o.Payload)
}

func (o *PutCrdFailure) GetPayload() models.Error {
	return o.Payload
}

func (o *PutCrdFailure) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
